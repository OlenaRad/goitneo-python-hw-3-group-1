from collections import UserDict
from datetime import datetime, timedelta

class Field:
    def __init__(self, value):
        self.value = value

    def validate(self):
        raise NotImplementedError("Subclasses must implement validate method.")

class Name(Field):
    def validate(self):
        if not self.value.strip():
            raise ValueError("Name cannot be empty.")

class Phone(Field):
    def validate(self):
        if not self.value.isdigit() or len(self.value) != 10:
            raise ValueError("Invalid phone number format.")

class Birthday(Field):
    def validate(self):
        try:
            datetime.strptime(self.value, '%d.%m.%Y')
        except ValueError:
            raise ValueError("Invalid birthday format. Please use DD.MM.YYYY.")

class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def add_phone(self, phone):
        phone_field = Phone(phone)
        phone_field.validate()
        self.phones.append(phone_field)

    def remove_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                self.phones.remove(p)
                return
        raise ValueError("Phone number not found.")

    def edit_phone(self, old_phone, new_phone):
        self.remove_phone(old_phone)
        self.add_phone(new_phone)

    def find_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                return p
        raise ValueError("Phone number not found.")

    def add_birthday(self, birthday):
        birthday_field = Birthday(birthday)
        birthday_field.validate()
        self.birthday = birthday_field

class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        if name in self.data:
            return self.data[name]
        raise ValueError("Record not found.")

    def delete(self, name):
        if name in self.data:
            del self.data[name]
        else:
            raise ValueError("Record not found.")

    def get_birthdays_per_week(self):
        today = datetime.now().date()
        next_week = today + timedelta(days=7)
        birthdays = []
        for record in self.data.values():
            if record.birthday:
                birthday_date = datetime.strptime(record.birthday.value, '%d.%m.%Y').date()
                if today <= birthday_date < next_week:
                    birthdays.append((record.name.value, birthday_date))
        return birthdays

class Bot:
    def __init__(self):
        self.book = AddressBook()

    def add_contact(self, name, phone):
        record = Record(name)
        record.add_phone(phone)
        self.book.add_record(record)

    def change_phone(self, name, new_phone):
        record = self.book.find(name)
        record.edit_phone(record.phones[0].value, new_phone)

    def show_phone(self, name):
        record = self.book.find(name)
        return record.phones[0].value

    def show_all_contacts(self):
        return list(self.book.data.keys())

    def add_birthday(self, name, birthday):
        record = self.book.find(name)
        record.add_birthday(birthday)

    def show_birthday(self, name):
        record = self.book.find(name)
        return record.birthday.value

    def show_birthdays_next_week(self):
        return self.book.get_birthdays_per_week()

    def greet(self):
        return "Hello! How can I assist you?"

if __name__ == "__main__":
    bot = Bot()
    while True:
        command = input("Enter a command: ")
        if command.startswith("add"):
            _, name, phone = command.split()
            bot.add_contact(name, phone)
        elif command.startswith("change"):
            _, name, new_phone = command.split()
            bot.change_phone(name, new_phone)
        elif command.startswith("phone"):
            _, name = command.split()
            print(bot.show_phone(name))
        elif command == "all":
            print(bot.show_all_contacts())
        elif command.startswith("add-birthday"):
            _, name, birthday = command.split()
            bot.add_birthday(name, birthday)
        elif command.startswith("show-birthday"):
            _, name = command.split()
            print(bot.show_birthday(name))
        elif command == "birthdays":
            print(bot.show_birthdays_next_week())
        elif command == "hello":
            print(bot.greet())
        elif command in ["close", "exit"]:
            print("Goodbye!")
            break
        else:
            print("Invalid command.")

